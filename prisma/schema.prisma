// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User entity
model User {
  userId           Int           @id @default(autoincrement())
  username         String
  email            String        @unique
  passwordHash     String
  role             String        @default("user")
  avatarUrl        String?
  githubHandle     String?
  linkedinHandle   String?
  joinedDate       DateTime      @default(now())
  personalWebsite  String?
  education        String?
  workPronoun      String?
  about            String?
  badges           String[]      @default([])
  skills           String[]      @default([])
  availableFor     String[]      @default([])
  currentlyHacking String?
  location         String?
  currentlyLearning String?
  brandColor       String?
  authenticated    Boolean       @default(false)
  authProvider     String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  topReaders       TopReaders[]
  topWriters       TopWriters[]
  loginLogs        LoginLog[]    // Added relation to LoginLog
  sessions         Session[]     // Added relation to Session
}

// Post entity
model Post {
  postId        Int           @id @default(autoincrement())
  title         String
  content       String
  imageUrl      String?
  status        String
  publishAt     DateTime
  authorId      Int
  author        User          @relation(fields: [authorId], references: [userId])
  tags          Tag[]         @relation("PostTags")
  metadata      PostMetadata?
  comments      Comment[]
  likes         Like[]
  analytics     Analytics[]
}

// Tag entity
model Tag {
  tagId         Int           @id @default(autoincrement())
  name          String        @unique
  posts         Post[]        @relation("PostTags")
}

// Comment entity
model Comment {
  commentId     Int           @id @default(autoincrement())
  content       String
  postId        Int
  post          Post          @relation(fields: [postId], references: [postId])
  userId        Int
  user          User          @relation(fields: [userId], references: [userId])
  parentId      Int?
  parent        Comment?      @relation("ChildComments", fields: [parentId], references: [commentId])
  childComments Comment[]     @relation("ChildComments")
}

// Like entity
model Like {
  likeId        Int           @id @default(autoincrement())
  postId        Int
  post          Post          @relation(fields: [postId], references: [postId])
  userId        Int
  user          User          @relation(fields: [userId], references: [userId])
  isLiked       Boolean
}

// Analytics entity
model Analytics {
  analyticsId   Int           @id @default(autoincrement())
  postId        Int
  post          Post          @relation(fields: [postId], references: [postId])
  viewsCount    Int
  createdAt     DateTime      @default(now())
}

// TopReaders entity
model TopReaders {
  topReaderId   Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [userId])
  totalViews    Int
  createdAt     DateTime      @default(now())
}

// TopWriters entity
model TopWriters {
  topWriterId   Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [userId])
  totalPosts    Int
  createdAt     DateTime      @default(now())
}

// PostMetadata entity
model PostMetadata {
  metadataId    Int           @id @default(autoincrement())
  postId        Int @unique
  post          Post          @relation(fields: [postId], references: [postId])
  metaTitle     String?
  metaDescription String?
  metaKeywords  String[]
}

// RouteAnalytics entity
model RouteAnalytics {
  routeAnalyticsId Int        @id @default(autoincrement())
  routePath        String     @unique
  requestCount     Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

// LoginLog entity
model LoginLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  userId    Int
  timestamp DateTime @default(now())
  ip        String
  device    String
  location  String?

  @@index([userId])
}

// Session entity
model Session {
  sessionId   Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [userId])
  userId      Int
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  sessionData String
  ip          String?
  userAgent   String?

  @@index([userId])
}
